from aiogram import types
from main import dp
from main import bot
from function import user_func as usfn
import requests
import asyncio
 
@dp.message_handler(commands=['start'])
async def start_handler_bot(message: types.Message):
    connect = await usfn.create_connection()
    check_user = await usfn.get_user(connect, message.from_user.id)
    if check_user == None:
        await usfn.add_user(connect, message.from_user.id, message.from_user.username)
    else:
        pass
    await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ TON. –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤.
<a href="https://gist.github.com/s0urce-c0d3/eb9d476c94610b3cd037023916de2fa1">–ë–æ—Ç —Å —É–≤–µ–¥–∞–º–∏ –æ—Ç TON</a>""", parse_mode='HTML')
    await bot.send_message(message.from_user.id, '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–Ω–æ–º–∞–Ω–¥–∞–º - /help', parse_mode='HTML')

@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await bot.send_message(message.from_user.id, """–ö–æ–º–∞–Ω–¥—ã:
/add_wallet <code> –∞–¥—Ä–µ—Å </code> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/remove_wallet <code> –∞–¥—Ä–µ—Å </code> - —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
/list_wallets - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏
/check_balance <code> –∞–¥—Ä–µ—Å </code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º""")

@dp.message_handler(commands=['add_wallet'])
async def add_wallet_handler(message: types.Message):
    # try:
        address = message.text.split(' ')[1]
        check_wallet = requests.get(f'https://toncenter.com/api/v2/getAddressInformation?address={address}')
        if check_wallet.json()["ok"] == True:
            connect = await usfn.create_connection()
            uniqueness_check = await usfn.get_wallet(connect, address, message.from_user.id)
            if uniqueness_check == None:
                await usfn.add_wallet(connect, address, message.from_user.id, check_wallet.json()['result']['balance'])
                await bot.send_message(message.from_user.id, f"""–£—Å–ø–µ—à–Ω–æ! <code>{address}</code> <b>–î–æ–±–∞–≤–ª–µ–Ω</b>""", parse_mode='HTML')
                await check_wallet_changes(message)
            else:
                await bot.send_message(message.from_user.id, """–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫""")
        if check_wallet.json()["ok"] == False:
            await bot.send_message(message.from_user.id, """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å""")
    # except:
        await bot.send_message(message.from_user.id, """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å""")

@dp.message_handler(commands=['list_wallets'])
async def list_wallet_handler(message: types.Message):
    try:
        connect = await usfn.create_connection()
        wallet_list = await usfn.get_all_wallets_user(connect, message.from_user.id)
        output = ''
        for i in wallet_list:
            output += f'<code>{i[0]}</code>\n\n'
        await bot.send_message(message.from_user.id, output, parse_mode='HTML')
    except:
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤', parse_mode='HTML')
    
@dp.message_handler(commands=['check_balance'])
async def check_balance_handler_bot(message: types.Message):
    try:
        address = message.text.split(' ')[1]
        check_wallet = requests.get(f'https://toncenter.com/api/v2/getAddressInformation?address={address}')
        if check_wallet.json()["ok"] == True:
            await bot.send_message(message.from_user.id, f"""–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ <code>{address}</code>\n<b>–°–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <i>{round(float(check_wallet.json()['result']['balance']) * 0.000000001, 2)} TON</i></b>""", parse_mode='HTML')
        if check_wallet.json()["ok"] == False:
            await bot.send_message(message.from_user.id, """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å""")
    except:
        await bot.send_message(message.from_user.id, """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å""")
    
@dp.message_handler(commands=['remove_wallet'])
async def remove_wallet_handler_bot(message: types.Message):
    try:
        connect = await usfn.create_connection()
        address = message.text.split(' ')[1]
        try:
            asd = await usfn.delete_wallets(connect, message.from_user.id, address)
            await bot.send_message(message.from_user.id, """–£—Å–ø–µ—à–Ω–æ""")
            print(asd)
        except:
            await bot.send_message(message.from_user.id, """–û—à–∏–±–∫–∞""")
    except:
        await bot.send_message(message.from_user.id, """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å""")
    
async def check_wallet_changes(message):
    connect = await usfn.create_connection()
    while True:
        print(1)
        wallets = await usfn.get_all_wallets_user(connect, message.from_user.id)
        for i in wallets:
            await asyncio.sleep(1)
            check_wallet = requests.get(f'https://toncenter.com/api/v2/getAddressInformation?address={i[0]}')
            if round(float(check_wallet.json()['result']['balance']), 2) == round(float(i[2]), 2):
                pass
            else:
                await bot.send_message(message.from_user.id, f"""üí∞ –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è!
–ö–æ—à–µ–ª—ë–∫: {i[0]}
–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {round(float(check_wallet.json()['result']['balance']) * 0.000000001, 2)} TON""")
        await asyncio.sleep(900)